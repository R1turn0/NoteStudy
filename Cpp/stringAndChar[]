# string and char[]

### char[]

- 如果在堆栈上分配，则无论包含多场的文本，将始终占用256字节
- 如果在堆上分配（使用malloc()或new char[]），在使用时将始终拥有堆分配的开销，在使用后需要手动释放内存
- 如果将超过256个字符的文本复制到数组中，他可能会崩溃、产生断言消息或在程序的其他地方导致无法解释的错误
- 需要确定文本的长度，必须逐个字符地扫描数组以查找\0字符

### string

string是一个包含 char 数组的类，但会自动为您管理它。大多数字符串实现都有一个 16 个字符的内置数组（因此短字符串不会使堆碎片化）并将堆用于较长的字符串。

可以像这样访问字符串的 char 数组：

```cpp
std::string myString = "Hello World";
const char *myStringChars = myString.c_str();
```

C++ 字符串可以包含嵌入的 \0 字符，无需计数即可知道它们的长度，比短文本的堆分配字符数组更快，并保护您免受缓冲区溢出。此外，它们更具可读性和更易于使用。

------

但是，C++ 字符串并不（非常）适合跨 DLL 边界使用，因为这将要求此类 DLL 函数的任何用户确保他使用完全相同的编译器和 C++ 运行时实现，以免他的字符串类表现不同。

通常，字符串类也会在调用堆上释放其堆内存，因此只有在您使用运行时的共享（.dll 或 .so）版本时，它才能再次释放内存。

简而言之：在所有内部函数和方法中使用 C++ 字符串。如果您曾经编写过 .dll 或 .so，请在公共（dll/so-exposed）函数中使用 C 字符串。